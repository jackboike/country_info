[{"/Users/jackboike/WebstormProjects/countries/client/src/index.js":"1","/Users/jackboike/WebstormProjects/countries/client/src/reportWebVitals.js":"2","/Users/jackboike/WebstormProjects/countries/client/src/App.js":"3","/Users/jackboike/WebstormProjects/countries/client/src/components/CountryList.js":"4","/Users/jackboike/WebstormProjects/countries/client/src/components/apollo.client.js":"5","/Users/jackboike/WebstormProjects/countries/client/src/components/queries.js":"6"},{"size":500,"mtime":1623011871717,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1623011871718,"results":"9","hashOfConfig":"8"},{"size":287,"mtime":1623023429326,"results":"10","hashOfConfig":"8"},{"size":6163,"mtime":1623192223637,"results":"11","hashOfConfig":"8"},{"size":195,"mtime":1623198039496,"results":"12","hashOfConfig":"8"},{"size":1680,"mtime":1623192223633,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kb90lx",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jackboike/WebstormProjects/countries/client/src/index.js",[],"/Users/jackboike/WebstormProjects/countries/client/src/reportWebVitals.js",[],"/Users/jackboike/WebstormProjects/countries/client/src/App.js",["28","29","30","31","32","33"],"import logo from './logo.svg';\nimport './App.css';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  gql\n} from \"@apollo/client\";\nimport CountryList from \"./components/CountryList\";\n\n\nfunction App() {\n  return (\n    <CountryList/>\n  );\n}\n\n\n\n\n\nexport default App;\n","/Users/jackboike/WebstormProjects/countries/client/src/components/CountryList.js",["34","35","36","37"],"import { useQuery, gql } from '@apollo/client';\nimport client from \"./apollo.client\";\nimport React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {CardDeck, Modal} from \"react-bootstrap\";\nimport {getContinentData, getCountryData, getLanguageData} from './queries.js';\nconst FEED_QUERY = gql`\n    query {\n        getCountries {\n            name\n            emoji\n            continent\n        }\n    }\n`;\n\nconst CountryList = () => {\n    const [show, setShow] = useState(false);\n    const [country, setCountry] = useState({name: \"\"});\n    const [data, setData] = useState([{}]);\n    const [arr, setArr] = useState([1, 1, 1, 1, 1, 1]);\n    const [params, setParams] = useState([\n        \"languages\",\n        \"currency\",\n        \"capital\",\n        \"native\",\n        \"phone\",\n        \"continent\"\n    ])\n    let country2 = \"\";\n    const handleClose = () => setShow(false);\n    const handleShow = async (item) => {\n        const rawData = await getCountryData(item.name, params);\n        let countryData = Object.assign({}, rawData);\n        if (params.includes(\"languages\")) {\n            countryData.language = await getLanguageData(countryData.languages[0]);\n        }\n        if (params.includes(\"continent\")) {\n            countryData.continent = await getContinentData(countryData.continent);\n        }\n        setCountry(countryData);\n        setShow(true);\n    }\n\n\n    let blueHex = \"#1982FC\";\n    client\n      .query({\n          query: FEED_QUERY\n      })\n      .then((result) => {\n          setData(result.data.getCountries);\n          console.log(result);\n      })\n      .catch((error) => {\n          console.log(error);\n      });\n\n    let toggledCard = {\n        boxShadow: \"1px 3px 1px #9E9E9E\",\n        textAlign: \"center\",\n        backgroundColor: \"#1982FC\",\n        cursor: \"pointer\",\n        userSelect: \"none\",\n        width: 200,\n    }\n\n    let nonToggledCard = {\n        boxShadow: \"1px 3px 1px #9E9E9E\",\n        textAlign: \"center\",\n        backgroundColor: \"#FFFFFF\",\n        cursor: \"pointer\",\n        userSelect: \"none\",\n        width: 200,\n    }\n\n    const changeParameters = (param, index) => {\n        if (params.includes(param)) {\n            let i = params.indexOf(param)\n            params.splice(i, 1);\n        } else {\n            params.push(param);\n        }\n        let toggles = arr;\n        if (toggles[index] === 0) {\n            toggles[index] = 1\n        } else {\n            toggles[index] = 0\n        }\n        setArr([...toggles]);\n        console.log(params)\n    }\n\n    return (\n      <div style={{marginLeft: 15}}>\n          <CardDeck style={{margin: 20, marginBottom: 30}}>\n              <Card\n                style={arr[0] === 1 ? toggledCard : nonToggledCard}\n                onClick={() => {changeParameters(\"languages\", 0); console.log(arr)}}\n              >\n                  <Card.Body>\n                      Languages\n                  </Card.Body>\n              </Card>\n              <Card\n                style={arr[1] === 1 ? toggledCard : nonToggledCard}\n                onClick={() => changeParameters(\"currency\", 1)}\n              >\n                  <Card.Body>\n                      Currency\n                  </Card.Body>\n              </Card>\n              <Card\n                style={arr[2] === 1 ? toggledCard : nonToggledCard}\n                onClick={() => changeParameters(\"capital\", 2)}\n              >\n                  <Card.Body>\n                      Capital\n                  </Card.Body>\n              </Card>\n              <Card\n                style={arr[3] === 1 ? toggledCard : nonToggledCard}\n                onClick={() => changeParameters(\"native\", 3)}\n              >\n                  <Card.Body>\n                      Native Name\n                  </Card.Body>\n              </Card>\n              <Card\n                style={arr[4] === 1 ? toggledCard : nonToggledCard}\n                onClick={() => changeParameters(\"phone\", 4)}\n              >\n                  <Card.Body>\n                      Phone\n                  </Card.Body>\n              </Card>\n              <Card\n                style={arr[5] === 1 ? toggledCard : nonToggledCard}\n                onClick={() => changeParameters(\"continent\", 5)}\n              >\n                  <Card.Body>\n                      Continent\n                  </Card.Body>\n              </Card>\n          </CardDeck>\n          {data.map(function(d, idx){\n              return (\n                <Card style={{width: 300, margin: 15, boxShadow: \"1px 3px 1px #9E9E9E\", cursor: \"pointer\"}} onClick={() => handleShow(d)}>\n                    <Card.Header style={{fontSize: 40, padding: 5}}>\n                        {d.emoji}\n                    </Card.Header>\n                    <Card.Body>\n                        <Card.Title style={{fontSize: 25}}>\n                            {d.name}\n                        </Card.Title>\n                    </Card.Body>\n                </Card>\n              )\n          })}\n          <Modal show={show} onHide={handleClose}>\n              <Modal.Header closeButton>\n                  <Modal.Title>\n                      {country.name + ' ' + country.emoji}\n                  </Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                  {country.native ? <>{\"Native name: \" + country.native}</> : <></>}\n                  {country.capital ? <><br/>{\"Capital: \" + country.capital}</> : <></>}\n                  {country.currency ? <><br/>{\"Currency: \" + country.currency}</> : <></>}\n                  {country.language ? <><br/>{\"Language(s): \" + country.language.name}</> : <></>}\n                  {country.continent ? <><br/>{\"Continent: \" + country.continent.name}</> : <></>}\n                  {country.phone ? <><br/>{\"Phone prefix: \" + country.phone} </> : <></>}\n              </Modal.Body>\n              <Modal.Footer>\n                  <Button variant=\"primary\" onClick={handleClose}>\n                      Close\n                  </Button>\n              </Modal.Footer>\n          </Modal>\n      </div>\n    );\n};\n\nexport default CountryList;\n","/Users/jackboike/WebstormProjects/countries/client/src/components/apollo.client.js",[],"/Users/jackboike/WebstormProjects/countries/client/src/components/queries.js",[],{"ruleId":"38","severity":1,"message":"39","line":1,"column":8,"nodeType":"40","messageId":"41","endLine":1,"endColumn":12},{"ruleId":"38","severity":1,"message":"42","line":4,"column":3,"nodeType":"40","messageId":"41","endLine":4,"endColumn":15},{"ruleId":"38","severity":1,"message":"43","line":5,"column":3,"nodeType":"40","messageId":"41","endLine":5,"endColumn":16},{"ruleId":"38","severity":1,"message":"44","line":6,"column":3,"nodeType":"40","messageId":"41","endLine":6,"endColumn":17},{"ruleId":"38","severity":1,"message":"45","line":7,"column":3,"nodeType":"40","messageId":"41","endLine":7,"endColumn":11},{"ruleId":"38","severity":1,"message":"46","line":8,"column":3,"nodeType":"40","messageId":"41","endLine":8,"endColumn":6},{"ruleId":"38","severity":1,"message":"45","line":1,"column":10,"nodeType":"40","messageId":"41","endLine":1,"endColumn":18},{"ruleId":"38","severity":1,"message":"47","line":24,"column":20,"nodeType":"40","messageId":"41","endLine":24,"endColumn":29},{"ruleId":"38","severity":1,"message":"48","line":32,"column":9,"nodeType":"40","messageId":"41","endLine":32,"endColumn":17},{"ruleId":"38","severity":1,"message":"49","line":48,"column":9,"nodeType":"40","messageId":"41","endLine":48,"endColumn":16},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'ApolloClient' is defined but never used.","'InMemoryCache' is defined but never used.","'ApolloProvider' is defined but never used.","'useQuery' is defined but never used.","'gql' is defined but never used.","'setParams' is assigned a value but never used.","'country2' is assigned a value but never used.","'blueHex' is assigned a value but never used."]